/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { MeshReflectorMaterial, Reflector, useGLTF, useTexture } from '@react-three/drei'

export default function Base(props) {
  const [colorMap, displacementMap,  aoMap] = useTexture([
    '/Textures/image.jpg',
    '/Textures/disp.png',
    '/Textures/ao.jpg',


  ]);
  const { nodes, materials } = useGLTF('/SuyogBuilding.glb')
  return (
    <group {...props} dispose={null}>
      <group position={[0, 24.848, 0]} scale={0.01}>
        <group position={[-126.971, -1042.493, -132.337]} scale={0.78}>
          <group position={[0, 0, -4.886]}>
            <group position={[-20.681, 0, -31.542]} scale={[0.64, 0.661, 0.64]}>
              {/* <mesh
                castShadow
                receiveShadow
                geometry={nodes.Rectangle_2001.geometry}
                material={materials['Material.006']}
                position={[276.132, -535.451, -202.065]}
                rotation={[Math.PI / 2, 0, 0]}
              /> */}
                    <Reflector
                castShadow
                receiveShadow
                resolution={1024}
                // args={[1500, 500]}
                mirror={100} // Maximum mirror reflection
                mixBlur={0.5} // Blur effect on reflection
                mixStrength={1} // Strength of reflection
                depthScale={100} // Effect of depth on reflection
                debug={0}
                position={[276.132, -535.451-460, -202.065]}
                rotation={[Math.PI / 2, 0, 0]}
              >
 {(Material) => (
    <mesh                           
    geometry={nodes.Rectangle_2001.geometry}

>
      <MeshReflectorMaterial
        map={colorMap} // The texture for the reflective surface
        displacementMap={displacementMap} // Displacement map for surface detail
        aoMap={aoMap} // Ambient occlusion map
        displacementScale={1} 
        roughness={0.2} 
        metalness={0.001} 
        // Adjust displacement intensity
      />
    </mesh>
  )}
              </Reflector>
              <mesh
               roughness={0.1} // Lower value makes the surface glossy
               metalness={1} // Higher value makes the surface shinier
                castShadow
                receiveShadow
                geometry={nodes.Rectangle_2002.geometry}
                material={materials['Material.004']}
                position={[1270.533, -772.491, 1299.589]}
                rotation={[0, 1.571, 0]}
              />
              <mesh
                castShadow
                receiveShadow
                geometry={nodes.Rectangle_2003.geometry}
                material={materials['Material.003']}
                position={[265.533, -798.681, -687.235]}
              />
              {/* <mesh
                castShadow
                receiveShadow
                geometry={nodes.Rectangle_5.geometry}
                material={materials['Material.007']}
                position={[-223.598, -530.146, 1044.883]}
                rotation={[Math.PI / 2, 0, Math.PI / 2]}
                scale={[1.212, 1, 1]}
              ></mesh> */}

<Reflector
                castShadow
                receiveShadow
                resolution={1024}
                // args={[1500, 500]}
                mirror={100} // Maximum mirror reflection
                mixBlur={0.5} // Blur effect on reflection
                mixStrength={0.5} // Strength of reflection
                depthScale={100} // Effect of depth on reflection
                debug={0}
                position={[-223.598, -530.146-460, 1044.883]}
                rotation={[Math.PI / 2, 0, Math.PI / 2]}
                scale={[1.212, 1, 1]}
              >
 {(Material) => (
    <mesh geometry={nodes.Rectangle_5.geometry}>
      <MeshReflectorMaterial
      
        map={colorMap} // The texture for the reflective surface
        displacementMap={displacementMap} // Displacement map for surface detail
        aoMap={aoMap} // Ambient occlusion map
        displacementScale={2} 
        roughness={0.2} // Lower value makes the surface glossy
        metalness={0.001} // Higher value makes the surface shinier
      />
    </mesh>
  )}
              </Reflector>
              {/* <Reflector
                castShadow
                receiveShadow
                resolution={1024}
                // args={[1500, 500]}
                mirror={100} // Maximum mirror reflection
                mixBlur={0.5} // Blur effect on reflection
                mixStrength={10} // Strength of reflection
                depthScale={100} // Effect of depth on reflection
                debug={0}
                position={[-223.598, -1662.642, 1330.923]}
                rotation={[Math.PI / 2, 0, Math.PI / 2]}
                scale={[1.609, 1, 1]}
              >
 {(Material) => (
    <mesh                 geometry={nodes.Rectangle_5001.geometry}
>
      <MeshReflectorMaterial
              roughness={0.2} 
              metalness={0.001} 
        map={colorMap} // The texture for the reflective surface
        displacementMap={displacementMap} // Displacement map for surface detail
        aoMap={aoMap} // Ambient occlusion map
        displacementScale={2} // Adjust displacement intensity
      />
    </mesh>
  )}
              </Reflector> */}
              {/* <mesh
                castShadow
                receiveShadow
                geometry={nodes.Rectangle_5001.geometry}
                material={materials['Material.008']}
                position={[-223.598, -1662.642, 1330.923]}
                rotation={[Math.PI / 2, 0, Math.PI / 2]}
                scale={[1.609, 1, 1]}
              /> */}
              {/* <mesh
                castShadow
                receiveShadow
                geometry={nodes.Rectangle_5002.geometry}
                material={materials['Material.009']}
                position={[244.287, -2647.546, 1295.994]}
                rotation={[Math.PI / 2, 0, 0]}
              /> */}
                          <Reflector
                castShadow
                receiveShadow
                resolution={1024}
                // args={[1500, 500]}
                mirror={100} // Maximum mirror reflection
                mixBlur={0.5} // Blur effect on reflection
                mixStrength={1} // Strength of reflection
                depthScale={100} // Effect of depth on reflection
                debug={0}
                position={[244.287, -2000.546-250, 1295.994]}
                rotation={[Math.PI / 2, 0, 0]}
              >
 {(Material) => (
    <mesh                                 geometry={nodes.Rectangle_5002.geometry}

>
      <MeshReflectorMaterial
              roughness={0.2} 
              metalness={0.001} 
        map={colorMap} // The texture for the reflective surface
        displacementMap={displacementMap} // Displacement map for surface detail
        aoMap={aoMap} // Ambient occlusion map
        displacementScale={1} // Adjust displacement intensity
      />
    </mesh>
  )}
              </Reflector>
              <mesh
                castShadow
                receiveShadow
                geometry={nodes.Rectangle_8.geometry}
                material={materials['Material.002']}
                position={[-767.513, -796.352, 1314.102]}
                rotation={[0, 1.571, 0]}
              />
                                    <Reflector
                castShadow
                receiveShadow
                resolution={1024}
                // args={[1500, 500]}
                mirror={100} // Maximum mirror reflection
                mixBlur={0.5} // Blur effect on reflection
                mixStrength={1} // Strength of reflection
                depthScale={100} // Effect of depth on reflection
                debug={0}
                position={[273.128, 323.651-300, -202.065]}
                rotation={[Math.PI / 2, 0, 0]}
              >
 {(Material) => (
    <mesh                              
    geometry={nodes.Rectangle_9.geometry}

>
      <MeshReflectorMaterial
              roughness={0.2} 
              metalness={0.001} 
        map={colorMap} // The texture for the reflective surface
        displacementMap={displacementMap} // Displacement map for surface detail
        aoMap={aoMap} // Ambient occlusion map
        displacementScale={1} // Adjust displacement intensity
      />
    </mesh>
  )}
              </Reflector>
              {/* <mesh
                castShadow
                receiveShadow
                geometry={nodes.Rectangle_9.geometry}
                material={materials['Material.005']}
                position={[273.128, 323.651, -202.065]}
                rotation={[Math.PI / 2, 0, 0]}
              /> */}
            </group>
          </group>
        </group>
        <Reflector
                castShadow
                receiveShadow
                resolution={1024}
                // args={[3000, 350]}
                mirror={100} // Maximum mirror reflection
                mixBlur={1} // Blur effect on reflection
                mixStrength={1} // Strength of reflection
                depthScale={100} // Effect of depth on reflection
                debug={0}
                position={[2.876, -135.318, -173.478]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={[1, 2.335, 1]}
              >
 {(Material) => (
    <mesh                           
    geometry={nodes.Rectangle.geometry}
    castShadow
    receiveShadow

>
      <MeshReflectorMaterial
              roughness={0.6} 
              metalness={0.007} 
              castShadow
              receiveShadow
        map={colorMap} // The texture for the reflective surface
        displacementMap={displacementMap} // Displacement map for surface detail
        aoMap={aoMap} // Ambient occlusion map
        displacementScale={1} // Adjust displacement intensity
      />
    </mesh>
  )}
              </Reflector>
        {/* <mesh
          castShadow
          receiveShadow
          geometry={nodes.Rectangle.geometry}
          material={materials['Material.001']}
          position={[2.876, -135.318, -173.478]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={[1, 2.335, 1]}
        >
     
        </mesh> */}
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Rectangle_2.geometry}
          material={materials['Material.011']}
          position={[-24.18, -916-155, -246.749]}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Rectangle_3.geometry}
          material={materials['Material.010']}
          position={[-319.663, -512.427, -173.751]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={[1, 2.125, 1]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Rectangle_4.geometry}
          material={materials['Material.014']}
          position={[325.5, -511.119, -173.751]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={[1, 2.125, 1]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['stairs-sides'].geometry}
          material={nodes['stairs-sides'].material}
          position={[-359.491, -1904.298-235, 881.16]}
          rotation={[-2.988, 0, -Math.PI]}
          scale={[133.024, 218.967, 117.795]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Group.geometry}
            material={materials['Material.013']}
            position={[-0.65, 0, -2]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Group_1.geometry}
            material={materials['Material.012']}
            position={[0.75, 0, -2]}
          />
        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('/SuyogBuilding.glb')
