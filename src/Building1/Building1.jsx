/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useState } from 'react'
import { useFrame, useThree } from '@react-three/fiber'

export default function Building1(props) {
  const group = useRef()
  const { nodes, materials, animations,scene } = useGLTF('/Room (19).glb')
  const { actions } = useAnimations(animations, group)

    
  const [enterDoor, setEnterDoor] = useState(false);
  const { camera, gl } = useThree();

  // Target position to check against
  const targetPosition = { x: 13.520559577486459, y: 130.29954007264053, z: 114.12155235058987 };

  // Tolerance for position comparison
  const tolerance = 80;

  const calculateDistance = (pos1, pos2) => {
    return Math.sqrt(
      (pos1.x - pos2.x) ** 2 +
      (pos1.y - pos2.y) ** 2 +
      (pos1.z - pos2.z) ** 2
    );
  };

  const tvScreen=useRef()



  useFrame(()=>{
    const distance = calculateDistance(camera.position, targetPosition);
    if (distance < tolerance) {
      setEnterDoor(true);
    }
    if (distance > tolerance) {
      setEnterDoor(false);
      
    }
  })

  useEffect(()=>{
    const doorOpen=actions[animations[0].name]
    const tv=actions[animations[1].name]
    
    if(doorOpen &&enterDoor){
        doorOpen.play()
        tv.play()
    }
    else{
      doorOpen.stop()
    }
    
      },[enterDoor])
  return (
    <group ref={group} {...props} dispose={null}>
    <primitive object={scene}/>
    </group>
  )
}

useGLTF.preload('/Room (17).glb')
